name: CD

#해당 브랜치에 push(merge) 했을 때
on:
  push:
    branches:
      - main

#테스트 결과 작성을 위해 쓰기권한 추가
permissions: write-all
#jdk 세팅
#gradle 캐싱
#test를 제외한 프로젝트 빌드
#도커 빌드 & 이미지 push
#docker-compose 파일을 ec2 서버에 배포
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # ### CD
      # #배포를 위한 prod properties 설정
      # - name: Make application-prod.properties
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application-prod.properties
      #     echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
      #   shell: bash
      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Build With Gradle
        run: ./gradlew build -x test

      - name: Docker build & Push
        run: |
          sudo docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/preonb .
          sudo docker push ${{ secrets.DOCKER_REPO }}/preonb

      - name: Deploy Images with Docker compose
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
             sudo docker stop preonb
             sudo docker rm -f $(docker ps -qa)
             sudo docker pull ${{ secrets.DOCKER_REPO }}/preonb
             sudo docker-compose up -d
             sudo docker image prune -f
